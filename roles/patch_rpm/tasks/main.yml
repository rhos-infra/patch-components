- name: Setting component_dist_git_name
  set_fact:
      component_dist_git_name: "{{ map_component_to_distgit[install.component.name].dist_git | default('openstack-' + install.component.name) }}"
      component_pre_rel_version: "{{ map_component_to_pre_rel_version[install.component.name].pre_rel_version }}"

- name: Setting component_dist_git_url
  set_fact:
      component_dist_git_url: "git://pkgs.devel.redhat.com/rpms/{{ component_dist_git_name }}"

# rhpkg is used by rdopkg
- name: Install rhpkg and rdopkg repos
  become: yes
  copy:
    src="{{ item }}.repo"
    dest="/etc/yum.repos.d/{{ item }}.repo"
    mode=0755
  with_items:
    - 'rhpkg'
    - 'rdopkg'

# TODO(abregman): Switch to yum_repository when Ansible 2.2 is released
- name: Install epel repository
  become: yes
  shell: yum localinstall -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
  tags:
    - skip_ansible_lint

# Although pyrpkg pulled by rhpkg, we install it directly because at the moment, an older
# version of pyrpkg is pulled (1.40) while we need a newer version (1.43)
- name: Install packages required for patching
  become: yes
  yum:
    name="{{ item }}"
    state=present
  with_items:
    - 'pyrpkg'
    - 'ca-certificates'
    - 'createrepo'
    - 'python-pip'
    - 'python-cryptography'
    - 'python-devel'
    - 'libffi-devel'
    - 'mock'
    - 'rpm-build'
    - 'openssl-devel'
    - 'rhpkg'
    - 'git'
    - 'gcc'

- name: Install rdopkg
  become: yes
  pip:
    name=rdopkg

# TODO(abregman): Switch to yum_repository when Ansible 2.2 is released
# EPEL is removed, since it is used only for installing rdopkg
# https://github.com/ansible/ansible-modules-extras/issues/2384
- name: Remove epel repository
  become: yes
  shell: "yum remove -y epel-*"
  args:
    warn: no
  changed_when: true

# mock group is needed for for the mockbuild
# without creating mock group, rdopkg will try to use root and ask for password
- name: Create mock group
  become: yes
  group:
    name=mock
    state=present

- name: Add ansible ssh user to mock group
  become: yes
  user:
    name="{{ ansible_user }}"
    groups=mock

- name: Clean dist-git path
  file:
    state: absent
    path: "{{ tmp_dir }}/dist-git/"

# Clone component dist-git repo
- name: Clone the component dist-git repo
  git:
    repo="{{ component_dist_git_url }}"
    version="rhos-{{ install.component.version }}.0-rhel-{{ ansible_distribution_version|int }}"
    dest="{{ tmp_dir }}/dist-git/{{ component_dist_git_name }}"
    accept_hostkey=true
  retries: 3
  delay: 120

- name: Patch Component
  include: patch_component.yaml
  when: not (install.component.name | match("odl-.*"))

- name: Patch and build OpenDaylight
  include: patch_opendaylight.yml
  become: true
  when: install.component.name | match("odl-.*")

# first, get save all the logs
- name: Create patching logs directory
  become: yes
  file:
    path=/var/log/extra/patching_logs
    state=directory
    mode=0777
  tags: logs

- name: Save patching logs
  become: yes
  shell: "cp {{ tmp_dir }}/dist-git/{{ component_dist_git_name }}/results*/*/*/*.log /var/log/extra/patching_logs/"
  changed_when: true
  when: rpm_mockbuild is defined
  tags: logs

- name: Save patching logs - OpenDaylight
  become: yes
  shell: |
      cp {{ tmp_dir }}/integration-packaging/logs/* /var/log/extra/patching_logs/
      cp /var/log/maven/* /var/log/extra/patching_logs/
  changed_when: true
  when: patch_opendaylight is defined
  tags: logs

- name: set patching_ok to true if it was successful
  set_fact:
      patching_ok: true
  when:
    - (rpm_mockbuild is defined and rpm_mockbuild.rc == 0) or (patch_opendaylight is defined and patch_opendaylight.rc == 0)

- name: fail if patching was not successful
  fail:
      msg: "Patching not successful"
  when: patching_ok is not defined

# Create directory to hold the RPMs
- name: Create '/patched_rpms' directory`
  become: yes
  file:
    path=/patched_rpms
    state=directory
    mode=0777

- name: Copy new generated RPMs to /patched_rpms
  shell: "cp {{ tmp_dir }}/dist-git/{{ component_dist_git_name }}/results*/*/*/*.rpm /patched_rpms/"
  when: rpm_mockbuild is defined

- name: Copy new generated RPMs to /patched_rpms - OpenDaylight
  shell: "cp {{ tmp_dir }}/integration-packaging/packages/cache/*.noarch.rpm /patched_rpms/"
  when: patch_opendaylight is defined

- name: Create repository for patched RPMs
  shell: "createrepo /patched_rpms;"

- name: Setup repository in /etc/yum.repos.d
  become: yes
  template:
    src='patched_rpms.j2'
    dest='/etc/yum.repos.d/patched_rpms.repo'
